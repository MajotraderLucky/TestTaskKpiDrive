package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
)

type Tag struct {
	ID           int    `json:"id"`
	Name         string `json:"name"`
	Key          string `json:"key"`
	ValuesSource int    `json:"values_source"`
}

type FilterField struct {
	Key   string   `json:"key"`
	Sign  string   `json:"sign"`
	Value []string `json:"values"`
}

type Filter struct {
	Field FilterField `json:"field"`
}

type Sort struct {
	Fields    []string `json:"fields"`
	Direction string   `json:"direction"`
}

type RequestBody struct {
	Filter Filter `json:"filter"`
	Sort   Sort   `json:"sort"`
	Limit  int    `json:"limit"`
}

type Response struct {
	Tags []struct {
		Tag   Tag    `json:"tag"`
		Value string `json:"value"`
	} `json:"tags"`
}

func main() {
	// Создание HTTP-клиента
	client := &http.Client{}

	// Создание тела запроса
	requestBody := RequestBody{
		Filter: Filter{
			Field: FilterField{
				Key:   "type",
				Sign:  "LIKE",
				Value: []string{"MATRIX_REQUEST"},
			},
		},
		Sort: Sort{
			Fields:    []string{"time"},
			Direction: "desc",
		},
		Limit: 10,
	}

	jsonRequestBody, err := json.Marshal(requestBody)
	if err != nil {
		fmt.Println("Ошибка маршалинга тела запроса", err)
		return
	}

	// Создание HTTP-запроса
	req, err := http.NewRequest("POST", "https://development.kpi-drive.ru/_api/facts/save_fact", bytes.NewBuffer(jsonRequestBody))
	if err != nil {
		fmt.Println("Ошибка создания HTTP-запроса", err)
		return
	}

	// Установка заголовков запроса
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer 48ab34464a5573519725deb5865cc74c")

	// Отправка запроса и получение ответа
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("Ошибка отправки HTTP-запроса", err)
		return
	}
	defer resp.Body.Close()

	// Чтение тела ответа
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Println("Ошибка чтения тела ответа", err)
		return
	}

	response := Response{}
	err = json.Unmarshal(body, &response)
	if err != nil {
		fmt.Println("Ошибка декодирования тела ответа", err)
		return
	}

	fmt.Println(response)
}
